[[plugins]]
repo = "neoclide/coc.nvim"
rev = "release"
merged = "v:false"

[[plugins]]
repo = "rcarriga/nvim-notify"

[[plugins]]
repo = "wsdjeg/dein-ui.vim"

[[plugins]]
repo = "mhinz/vim-startify"

[[plugins]]
repo = "tyrannicaltoucan/vim-quantum"

[[plugins]]
repo = "lifepillar/vim-solarized8"

[[plugins]]
repo = "4513ECHO/vim-colors-hatsunemiku"

[[plugins]]
repo = "Rigellute/rigel"

[[plugins]]
repo = "liuchengxu/vista.vim"

[[plugins]]
repo = "liuchengxu/vim-clap"

[[plugins]]
repo = "junegunn/fzf.vim"

[[plugins]]
repo = "ryanoasis/vim-devicons"

[[plugins]]
repo = "kyazdani42/nvim-web-devicons"
depends = ["vim-devicons"]

[[plugins]]
repo = "kyazdani42/nvim-tree.lua"
depends = ["nvim-web-devicons", "vim-devicons"]

[[plugins]]
repo = "dense-analysis/ale"

[[plugins]]
repo = "airblade/vim-gitgutter"

[[plugins]]
repo = "terrortylor/nvim-comment"

[[plugins]]
repo = "tpope/vim-fugitive"

[[plugins]]
repo = "tpope/vim-surround"

[[plugins]]
repo = "AndrewRadev/switch.vim"

[[plugins]]
repo = "kassio/neoterm"

[[plugins]]
repo = "andymass/vim-matchup"

[[plugins]]
repo = "jiangmiao/auto-pairs"

[[plugins]]
repo = "tpope/vim-endwise"

[[plugins]]
repo = "nvim-treesitter/nvim-treesitter"
hook_add = '''
lua << LUA
require('nvim-treesitter.configs').setup {
  ensure_installed = { 'json', 'javascript', 'css', 'typescript', 'toml', 'vim', 'html', 'python', 'bash', 'lua', 'markdown' },
  sync_install = false,
  highlight = {
    enable = true,
    disable = {'javascript', 'html', 'typescript'},
    additional_vim_regex_highlighting = {'html', 'typescript'},
  },
}
LUA
'''
hook_done_update = '''
TSUpdate
'''

[[plugins]]
repo = 'neovim/nvim-lsp'
hook_add = '''
lua << LUA
-- Mappings.
-- See `:help vim.diagnostic.*` for documentation on any of the below functions
local opts = { noremap=true, silent=true }
vim.api.nvim_set_keymap('n', '<space>e', '<cmd>lua vim.diagnostic.open_float()<CR>', opts)
vim.api.nvim_set_keymap('n', '[d', '<cmd>lua vim.diagnostic.goto_prev()<CR>', opts)
vim.api.nvim_set_keymap('n', ']d', '<cmd>lua vim.diagnostic.goto_next()<CR>', opts)
vim.api.nvim_set_keymap('n', '<space>q', '<cmd>lua vim.diagnostic.setloclist()<CR>', opts)

-- Use an on_attach function to only map the following keys
-- after the language server attaches to the current buffer
local on_attach = function(client, bufnr)
  -- Enable completion triggered by <c-x><c-o>
  vim.api.nvim_buf_set_option(bufnr, 'omnifunc', 'v:lua.vim.lsp.omnifunc')

  -- Mappings.
  -- See `:help vim.lsp.*` for documentation on any of the below functions
  vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gD', '<cmd>lua vim.lsp.buf.declaration()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gd', '<cmd>lua vim.lsp.buf.definition()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', 'K', '<cmd>lua vim.lsp.buf.hover()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '<C-k>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>wa', '<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>wr', '<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>wl', '<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>D', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>rn', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>ca', '<cmd>lua vim.lsp.buf.code_action()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>f', '<cmd>lua vim.lsp.buf.formatting()<CR>', opts)
end

-- Use a loop to conveniently call 'setup' on multiple servers and
-- map buffer local keybindings when the language server attaches
local servers = { 'pyright', 'vimls', 'tsserver' }
for _, lsp in pairs(servers) do
  require('lspconfig')[lsp].setup {
    on_attach = on_attach,
    flags = {
      -- This will be the default in neovim 0.7+
      debounce_text_changes = 150,
    }
  }
end
LUA
'''
