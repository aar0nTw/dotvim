[[plugins]]
repo = "neoclide/coc.nvim"
rev = "release"
merged = "v:false"

[[plugins]]
repo = "github/copilot.vim"
rev = "release"
hook_add = '''
let g:copilot_node_command = "~/.nvm/versions/node/v18.15.0/bin/node"
let g:copilot_filetypes = {
  \ '*': v:false,
  \ 'python': v:true,
  \ 'javascript': v:true,
  \ 'typescript': v:true,
  \ 'typescriptreact': v:true,
  \ 'javascriptreact': v:true,
  \ 'go': v:true,
  \ 'rust': v:true,
  \ 'c': v:true,
  \ 'cpp': v:true,
  \ 'java': v:true,
  \ 'ruby': v:true,
  \ 'php': v:true,
  \ 'lua': v:true,
  \ 'toml': v:true,
  \ }
'''
[[plugins]]
repo = "nvim-neotest/nvim-nio"

[[plugins]]
repo = "embear/vim-localvimrc"

[[plugins]]
repo = "mortepau/codicons.nvim"

[[plugins]]
repo = "mfussenegger/nvim-dap"
hook_add = '''
lua <<LUA
vim.keymap.set('n', '<F6>', function() require('dap').step_over() end)
vim.keymap.set('n', '<F5>', function() require('dap').continue() end)
vim.keymap.set('n', '<F4>', function() require('dap').step_into() end)
vim.keymap.set('n', '<F3>', function() require('dap').terminate() end)
vim.keymap.set('n', '<F2>', function() require('dap').step_out() end)
vim.keymap.set('n', '<Leader>b', function() require('dap').toggle_breakpoint() end)
vim.keymap.set('n', '<Leader>B', function() require('dap').set_breakpoint() end)
vim.keymap.set('n', '<Leader>lb', function() require('dap').set_breakpoint(vim.fn.input('Breakpoint condition: ')) end)
vim.keymap.set('n', '<Leader>lp', function() require('dap').set_breakpoint(nil, nil, vim.fn.input('Log point message: ')) end)
vim.keymap.set('n', '<Leader>dr', function() require('dap').repl.open() end)
vim.keymap.set('n', '<Leader>dl', function() require('dap').run_last() end)
vim.keymap.set('n', '<Leader>di', function() require('dapui').toggle() end)
vim.keymap.set({'n', 'v'}, '<Leader>dh', function()
    require('dap.ui.widgets').hover()
    end)
vim.keymap.set({'n', 'v'}, '<Leader>dp', function()
    require('dap.ui.widgets').preview()
    end)
vim.keymap.set('n', '<Leader>df', function()
    local widgets = require('dap.ui.widgets')
    widgets.centered_float(widgets.frames)
    end)
vim.keymap.set('n', '<Leader>ds', function()
    local widgets = require('dap.ui.widgets')
    widgets.centered_float(widgets.scopes)
    end)

vim.api.nvim_set_hl_ns(10)
vim.api.nvim_set_hl(10, 'DapBreakpoint', { fg='#993939', bg='#31353f' })
vim.api.nvim_set_hl(10, 'DapLogPoint', { fg='#61afef', bg='#31353f' })
vim.api.nvim_set_hl(10, 'DapStopped', { fg='#98c379', bg='#31353f' })

vim.fn.sign_define('DapBreakpoint', { text='ÓÆ¥', texthl='DapBreakpoint', linehl='DapBreakpoint', numhl='DapBreakpoint' })
vim.fn.sign_define('DapBreakpointCondition', { text='ÓÆµ', texthl='DapBreakpoint', linehl='DapBreakpoint', numhl='DapBreakpoint' })
vim.fn.sign_define('DapBreakpointRejected', { text='ÔÅ™', texthl='DapBreakpoint', linehl='DapBreakpoint', numhl= 'DapBreakpoint' })
vim.fn.sign_define('DapLogPoint', { text='ÔÅö', texthl='DapLogPoint', linehl='DapLogPoint', numhl= 'DapLogPoint' })
vim.fn.sign_define('DapStopped', { text='ÔÖÑ', texthl='DapStopped', linehl='DapStopped', numhl= 'DapStopped' })
require("dap").adapters["pwa-node"] = {
  type = "server",
  host = "localhost",
  port = "${port}",
  executable = {
    command = "node",
    -- üíÄ Make sure to update this path to point to your installation
    args = {"/Users/aaron/Projects/js-debug/src/dapDebugServer.js", "${port}"},
  }
}

require("dap").configurations.javascript = {
  {
    type = "pwa-node",
    request = "launch",
    name = "Launch file",
    program = "${file}",
    cwd = "${workspaceFolder}",
  },
}
LUA
'''

[[plugins]]
repo = "rcarriga/nvim-dap-ui"
depends = ["nvim-dap"]
hook_add = '''
lua <<LUA
local dap, dapui = require("dap"), require("dapui")
dapui.setup({
  layouts = { {
      elements = { {
          id = "stacks",
          size = 0.25
        }, {
          id = "breakpoints",
          size = 0.10
        }, {
          id = "scopes",
          size = 0.40
        }, {
          id = "watches",
          size = 0.25
        } },
      position = "left",
      size = 40
    }, {
      elements = { {
          id = "console",
          size = 0.5
        }, {
          id = "repl",
          size = 0.5
        } },
      position = "bottom",
      size = 10
    }
  }
})
dap.listeners.after.event_initialized["dapui_config"] = function()
  dapui.open()
end
dap.listeners.before.event_terminated["dapui_config"] = function()
  -- dapui.close()
end
dap.listeners.before.event_exited["dapui_config"] = function()
  -- dapui.close()
end
LUA
'''

[[plugins]]
repo = "mxsdev/nvim-dap-vscode-js"
depends = ["nvim-dap"]

[[plugins]]
repo = "vim-test/vim-test"

[[plugins]]
repo = "nvim-lua/plenary.nvim"

[[plugins]]
repo = "nathanaelkane/vim-indent-guides"

[[plugins]]
repo = "godlygeek/tabular"

[[plugins]]
repo = "rcarriga/nvim-notify"
depends = ["plenary.nvim"]

[[plugins]]
repo = "ap/vim-css-color"

[[plugins]]
repo = "wsdjeg/dein-ui.vim"

[[plugins]]
repo = "glepnir/dashboard-nvim"

[[plugins]]
repo = "tpope/vim-dispatch"

[[plugins]]
repo = "sunaku/vim-dasht"

[[plugins]]
repo = "jgdavey/tslime.vim"
hook_post_source = '''
let g:tslime_always_current_session = 1
let g:tslime_always_current_window = 1
'''

[[plugins]]
repo = "tyrannicaltoucan/vim-quantum"

[[plugins]]
repo = "liuchengxu/vista.vim"

[[plugins]]
repo = "liuchengxu/vim-clap"

[[plugins]]
repo = "junegunn/fzf.vim"

[[plugins]]
repo = "ryanoasis/vim-devicons"

[[plugins]]
repo = "kyazdani42/nvim-web-devicons"
depends = ["vim-devicons"]

[[plugins]]
repo = "kyazdani42/nvim-tree.lua"
depends = ["nvim-web-devicons", "vim-devicons"]

[[plugins]]
repo = "dense-analysis/ale"

[[plugins]]
repo = "airblade/vim-gitgutter"

[[plugins]]
repo = "terrortylor/nvim-comment"

[[plugins]]
repo = "tpope/vim-fugitive"

[[plugins]]
repo = "tpope/vim-surround"

[[plugins]]
repo = "AndrewRadev/switch.vim"

[[plugins]]
repo = "kassio/neoterm"

[[plugins]]
repo = "hrsh7th/nvim-cmp"

[[plugins]]
repo = "vim-airline/vim-airline"
hook_add='''
"Custome airline setting
"
let g:airline_symbols = {}
let g:rigel_airline = 1
let g:airline_theme = 'rigel'
set ttimeoutlen=50
let g:airline_left_sep = 'ÓÇ∞'
let g:airline_left_alt_sep = 'ÓÇ±'
let g:airline_right_sep = 'ÓÇ≤'
let g:airline_right_alt_sep = 'ÓÇ≥'
let g:airline_symbols.branch = 'ÓÇ†'
let g:airline_symbols.linenr= 'ÓÇ°'
let g:airline_symbols.reaonly= 'ÓÇ¢'

"let g:airline_linecolumn_prefix = ''
let g:airline#extensions#whitespace#enabled = 0
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#tagbar#enabled = 2
let g:airline#extensions#csv#enabled = 0
let g:airline#extensions#hunks#enabled = 0
let g:airline#extensions#virtualenv#enabled = 0

" enable tabline
let g:airline#extensions#tabline#enabled = 1
" " set left separator
let g:airline#extensions#tabline#left_sep = 'ÓÇ∞'
" " set left separator which are not editting
let g:airline#extensions#tabline#left_alt_sep = 'ÓÇ±'
" " show buffer number

let g:airline#extensions#tabline#fnamemod = ':t'

'''

[[plugins]]
repo = "vim-airline/vim-airline-themes"

[[plugins]]
repo = "jlanzarotta/bufexplorer"

[[plugins]]
repo = "andymass/vim-matchup"
hook_add = '''
lua <<LUA
require'nvim-treesitter.configs'.setup {
  matchup = {
    enable = true,
  },
}
LUA
'''
# Disable match hl in insert mode.
# Make make match highlight less jarring.
hook_post_source = '''
let g:matchup_matchpref = {}
let g:matchup_matchpref.vue = {'tagnameonly': 1}
let g:matchup_matchpref.html = {'tagnameonly': 1}
let g:matchup_matchparen_nomode = 'i'
hi MatchParen ctermbg=blue guibg=lightblue cterm=italic gui=bold
'''

[[plugins]]
repo = "jiangmiao/auto-pairs"

[[plugins]]
repo = "tpope/vim-endwise"

[[plugins]]
repo = "nvim-treesitter/nvim-treesitter"
hook_add = '''
lua <<LUA
require('nvim-treesitter.configs').setup {
  ensure_installed = {
    'json',
    'javascript',
    'css',
    'typescript',
    'toml',
    'vim',
    'html',
    'python',
    'bash',
    'lua',
    'markdown'
  },
  sync_install = false,
  highlight = {
    enable = true,
    disable = {'html'},
    additional_vim_regex_highlighting = {'html', 'typescript'},
  },
}
LUA
'''
hook_done_update = '''
TSUpdate
'''

[[plugins]]
repo = 'neovim/nvim-lsp'
hook_add = '''
lua <<LUA
-- Mappings.
-- See `:help vim.diagnostic.*` for documentation on any of the below functions
local opts = { noremap=true, silent=true }
vim.api.nvim_set_keymap('n', '<space>e', '<cmd>lua vim.diagnostic.open_float()<CR>', opts)
vim.api.nvim_set_keymap('n', '[d', '<cmd>lua vim.diagnostic.goto_prev()<CR>', opts)
vim.api.nvim_set_keymap('n', ']d', '<cmd>lua vim.diagnostic.goto_next()<CR>', opts)
vim.api.nvim_set_keymap('n', '<space>q', '<cmd>lua vim.diagnostic.setloclist()<CR>', opts)

-- Use an on_attach function to only map the following keys
-- after the language server attaches to the current buffer
local on_attach = function(client, bufnr)
  -- Enable completion triggered by <c-x><c-o>
  vim.api.nvim_buf_set_option(bufnr, 'omnifunc', 'v:lua.vim.lsp.omnifunc')

  -- Mappings.
  -- See `:help vim.lsp.*` for documentation on any of the below functions
  vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gD', '<cmd>lua vim.lsp.buf.declaration()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gd', '<cmd>lua vim.lsp.buf.definition()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', 'K', '<cmd>lua vim.lsp.buf.hover()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '<C-k>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>wa', '<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>wr', '<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>wl', '<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>D', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>rn', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>ca', '<cmd>lua vim.lsp.buf.code_action()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>f', '<cmd>lua vim.lsp.buf.formatting()<CR>', opts)
end

-- Use a loop to conveniently call 'setup' on multiple servers and
-- map buffer local keybindings when the language server attaches
local servers = { 'pyright', 'vimls', 'ts_ls' }
for _, lsp in pairs(servers) do
  require('lspconfig')[lsp].setup {
    on_attach = on_attach,
    flags = {
      -- This will be the default in neovim 0.7+
      debounce_text_changes = 150,
    }
  }
end
LUA
'''
